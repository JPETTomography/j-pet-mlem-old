#! /usr/bin/env python

import os.path
import sys
sys.path.append("../scripts")

from petmatrix import SparseMatrixHeader

from subprocess import run

out='.'

def configure(ctx):
	pass


from waflib.Task import Task


def build(ctx):
	pass

def run_and_check(cmd):
    print("running " + ' '.join(cmd))
    info=run(cmd)
    if info.returncode !=0:
        sys.exit()

class gen_description(Task):
	def run(self):
		run(["../2d_barrel_describe_scanner","--big-barrel","-o","big_barrel"])
		

def build(ctx):
	desc = gen_description(env=ctx.env)
	desc.set_inputs(ctx.path.find_resource('../2d_barrel_describe_scanner'))
	desc.set_outputs([ctx.path.find_or_declare("big_barrel_dets.txt"),
		ctx.path.find_or_declare("big_barrel_syms.txt")])
	print(desc.outputs)
	ctx.add_to_group(desc)
	

# 


# if recalculate :
#     run_and_check(["../2d_barrel_matrix", "-c", "m_big_ref.cfg",
#     "--detector-file","big_barrel_dets.txt",
#     "--detector-file-sym","big_barrel_syms.txt",
#     "-e", "%d" % (n_emissions,), "-o", "m_big",
#          "-v"])


# # Convert to full matrix
# if recalculate or not os.path.isfile("f_big"):
#     run_and_check(["../2d_barrel_matrix", "-c", "m_big.cfg",
#     "--detector-file","big_barrel_dets.txt",
#     "--detector-file-sym","big_barrel_syms.txt",
#     "-o", "f_big", "-f", "m_big"])


# # Prepare phantom
# n_phantom_emissions = 100000000
# if recalculate:
#     run_and_check(["../3d_hybrid_phantom", "-c", "m_big.cfg", "-o", "p_sphere.txt",
#          "-e", "%d" % (n_phantom_emissions,), "s_sphere.json", "-v"])

# # Alternatively prepare phantom wih GATE 

# # Reconstruct
# if recalculate:
#     run_and_check(["../3d_hybrid_reconstruction", "-c", "m_big.cfg", "--system", "f_big", "-o", "r_big",
#          "-i", "10", "-v", "p_sphere.txt"])
