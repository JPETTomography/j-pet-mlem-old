# PET project main description file
#
# Author: Adam Strzelecki <adam.strzelecki@uj.edu.pl>
#
# Description:
#   Builds all PET project commands using CMake build generator.

cmake_minimum_required(VERSION 2.6)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

project(PET CXX) # using only C++

# enable C++11 and warnings
if(NOT MSVC)
  add_definitions(-std=c++11 -Wall -Wunused-parameter)
else()
  set(CMAKE_CXX_STANDARD 11)
  set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
  add_definitions(/D_USE_MATH_DEFINES /wd4244 /wd4800 /wd4267 /wd4996)
endif()

include_directories(src lib/cmdline)

# common headers and utility sources used by all commands
file(GLOB COMMON
  src/geometry/*.h
  src/math/*.h
  src/util/*.h
  src/util/png_writer.cpp
  src/util/cmdline_hooks.cpp)

# OpenMP support
find_package(OpenMP)
if(OPENMP_FOUND)
  list(APPEND CMAKE_CXX_FLAGS ${OpenMP_CXX_FLAGS})
endif()

# CUDA specific flags
find_package(CUDA)
if(CUDA_FOUND)
  add_definitions(-DHAVE_CUDA=1)
  include_directories(${CUDA_INCLUDE_DIRS})
  list(APPEND CUDA_NVCC_FLAGS -arch=compute_20)
  list(APPEND CUDA_NVCC_FLAGS_RELEASE -Xptxas -O3 --use_fast_math)
  if(NOT MSVC)
    list(APPEND CUDA_NVCC_FLAGS -Xcompiler -Wall,-Wno-unused-function)
  else()
    list(APPEND CUDA_NVCC_FLAGS -Xcompiler /wd4244,/wd4800,/wd4267,/wd4996)
    list(APPEND CUDA_NVCC_FLAGS_RELEASE -Xcompiler /MD)
    list(APPEND CUDA_NVCC_FLAGS_DEBUG   -Xcompiler /MDd)
  endif()
  # don't add host flags to CUDA
  set(CUDA_PROPAGATE_HOST_FLAGS OFF)
  # workaround FindCUDA bug
  if(NOT CMAKE_C_COMPILER)
    if(NOT MSVC)
      include(CMakeDetermineCCompiler)
      get_filename_component(CUDA_HOST_COMPILER "${CMAKE_C_COMPILER}" REALPATH)
    else()
      set(CUDA_HOST_COMPILER "${CMAKE_CXX_COMPILER}")
    endif()
  endif()
endif()

# libpng for output image generation
find_package(PNG)
if(NOT PNG_FOUND AND MSVC)
  include(ExtPNG) # builds libpng automatically
endif()
if(PNG_FOUND)
  add_definitions(-DHAVE_LIBPNG=1 ${PNG_DEFINITIONS})
  include_directories(${PNG_INCLUDE_DIRS})
  link_libraries(${PNG_LIBRARIES})
endif()

# custom function that creates executable for specific PET command
# see below for command list generated by this function
function(pet_target TYPE CMD)
  # if we pass NO_CUDA then CUDA is skipped
  set(OPTIONS "${ARGN}")
  list(FIND OPTIONS NO_CUDA NO_CUDA)
  # find all possible kernels
  file(GLOB CUDA src/${TYPE}/cuda/${CMD}*.cu)
  if(CUDA_FOUND AND CUDA AND NO_CUDA EQUAL -1)
    # compile kernel sources
    cuda_compile(CUDA ${CUDA})
    # append CUDA specific headers & wrappers
    file(GLOB CUDA_HEADERS
      src/${TYPE}/cuda/*.h
      src/util/cuda/*.h
      src/${TYPE}/cuda/*.cuh
      src/${TYPE}/cuda/${CMD}*.cpp)
    list(APPEND CUDA ${CUDA_HEADERS})
  endif()
  # add target specific headers
  file(GLOB HEADERS src/${TYPE}/*.h)
  # add target executable
  add_executable(${TYPE}_${CMD}
    src/${TYPE}/${CMD}_cmd.cpp
    ${HEADERS}
    ${COMMON}
    ${CUDA})
  # add CUDA objects to the target
  if(CUDA_FOUND)
    target_link_libraries(${TYPE}_${CMD} ${CUDA_LIBRARIES})
  endif()
  # fix Intel OpenMP runtime location
  if(APPLE AND CMAKE_CXX_COMPILER_ID MATCHES "Intel")
    add_custom_command(TARGET ${TYPE}_${CMD}
      POST_BUILD
      COMMAND ${CMAKE_INSTALL_NAME_TOOL}
        -add_rpath /opt/intel/lib
        -change    libiomp5.dylib @rpath/libiomp5.dylib
        ${TYPE}_${CMD})
  endif()
endfunction()

# list all built PET commands using pet_target(subproj cmdname), where main
# source file is in src/subproj/cmdname_cmd.cpp
pet_target(2d_xy matrix)
pet_target(2d_xy phantom)
pet_target(2d_xy reconstruction)
pet_target(2d_strip phantom)
pet_target(2d_strip reconstruction)

# custom documentation and config files to be shown in project tree
file(GLOB EXTRA scripts/* cmake/*)
add_custom_target(extra SOURCES README.md .clang-format ${EXTRA})
